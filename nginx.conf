# Starting/stopping nginx as a non-root user is a pain, but this works, assuming you execute from the directory containing the nginx.conf file
# Note that you still get a warning about accessing the hard-coded log file path: open() "/var/log/nginx/error.log" failed (13: Permission denied)
#
# To start: nginx -p . -c nginx.conf
# To stop: nginx -p . -c nginx.conf -s stop
# To reload config: nginx -p . -c nginx.conf -s reload
#
# Some NGINX docs:
#  http://nginx.org/en/docs/http/request_processing.html
#  http://nginx.com/resources/admin-guide/serving-static-content/
#  https://www.linode.com/docs/websites/nginx/basic-nginx-configuration
#  http://wiki.nginx.org/CommandLine

# If debugging needed...
error_log	logs/nginx.error.log debug;
#error_log	logs/nginx.error.log;

# Apparently the "./" is needed here, but not in the error/access file names...
pid ./nginx.pid;

worker_processes 1;

events {
	worker_connections	255;
}

http {
	default_type text/plain;

	log_format   main_fmt '$remote_addr - $remote_user [$time_local]  $request - $status';

	access_log   logs/nginx.access.log  main_fmt;

	server {
		listen       8000;
		server_name  localhost;
		access_log   logs/nginx.localhost.access.log  main_fmt;

		# Route flask requests on to UWSGI
		#   e.g. curl http://localhost:8000/flask/flask_app ; echo
		location /flask/ {
			rewrite		^\/flask\/(.*)$ $1 break;

			include uwsgi_params;
			uwsgi_pass unix:uwsgi.socket;
		}

		# Serve up static files from data/static
		#   e.g. curl http://localhost:8000/static/test.txt ; echo
		location ^~ /static/ {
			# Docs say that using "root" is better, but alias seems clearer
			#root data ;
			alias data/static/ ;
		}

	}

}