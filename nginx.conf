# Starting/stopping nginx as a non-root user is a pain, but this works, assuming you execute from the directory containing the nginx.conf file
# Note that you still get a warning about accessing the hard-coded log file path: open() "/var/log/nginx/error.log" failed (13: Permission denied)
#
# To start: nginx -p . -c nginx.conf
# To stop: nginx -p . -c nginx.conf -s stop
# To reload config: nginx -p . -c nginx.conf -s reload


# Note that the default root is "html" according to the NGINX docs:
#  http://nginx.org/en/docs/http/ngx_http_core_module.html#root
# Also note that setting root with a relative string (i.e. no leading "/") results in appending to the prefix path and default root
# This means that if you do a rewrite, it's easy to end up with some final URI like ./html/a/b/c

# Also note that prefix string matching is case-insensitive on Mac OSX!


# Maybe add extra debug info to error log?
error_log	logs/nginx.error.log debug;
#error_log	logs/nginx.error.log;

# Apparently the "./" is needed here, but not in the log file names...
pid ./nginx.pid;

worker_processes 1;

events {
	worker_connections	255;
}

http {
	default_type text/plain;

	log_format   main_fmt '$remote_addr - $remote_user [$time_local]  $request - $status';

	access_log   logs/nginx.access.log  main_fmt;


	server {
		listen		8000;
		server_name	localhost;
		access_log	logs/nginx.localhost.access.log  main_fmt;
		error_log	logs/nginx.localhost.error.log debug;
		rewrite_log on;

		root . ;
		index index.html;

		# Route flask requests on to UWSGI
		#   e.g. curl http://localhost:8000/flask/flask_app ; echo
		location /flask/ {
			rewrite		^\/flask\/(.*)$ /$1 break;

			include uwsgi_params;
			uwsgi_pass unix:uwsgi.socket;
		}

		# Serve up static files from data/static
		#   e.g. curl http://localhost:8000/static/test.txt ; echo
		location ^~ /static/ {
			# Docs say that using "root" is better, but "alias" seems clearer to me
			#root data ;
			alias data/static/ ;
		}

		location /moof/ {
			rewrite		^\/moof\/(.*)$ /TEST/$1 last;
			rewrite		^\/MOOF\/(.*)$ /TEST/$1 last;
		}

		location /TEST {
			return 200 '$request_uri:$document_uri';
		}
	}
}
